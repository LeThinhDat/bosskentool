import os
import re
import time
import subprocess
import requests
from datetime import datetime
from xml.etree import ElementTree as ET
from time import sleep
from colorama import Fore, Style, init
from pystyle import Colors, Colorate, Write, Center, Add, Box

os.environ['TZ'] = 'Asia/Ho_Chi_Minh'

headers = {
    'authority': 'traodoisub.com',
    'accept': '*/*',
    'accept-language': 'vi-VN,vi;q=0.9',
    'user-agent': 'traodoisub tiktok tool',
}

def get_device_address():
    try:
        result = subprocess.check_output(["adb", "devices"]).decode('utf-8')
        devices = [line.split('\t')[0] for line in result.split('\n')[1:] if line.strip() and '\tdevice' in line]
        if not devices:
            print("❌ Không tìm thấy thiết bị nào kết nối")
            return None
        ip_devices = [d for d in devices if ':' in d]
        return ip_devices[0] if ip_devices else devices[0]
    except Exception as e:
        print(f"❌ Lỗi khi lấy danh sách thiết bị: {str(e)}")
        return None

def open_tiktok_studio(device_id):
    package = "com.ss.android.tt.creator"
    activity = "com.ss.android.ugc.aweme.splash.SplashActivity"
    cmd = f"adb -s {device_id} shell am start -n {package}/{activity}"
    try:
        os.system(cmd)
        print(f"✅ Mở TikTok Studio trên thiết bị {device_id}")
        return True
    except Exception as e:
        print(f"❌ Lỗi mở TikTok Studio: {str(e)}")
        return False

def find_and_click_khac(device_id):
    time.sleep(3)
    subprocess.run(["adb", "-s", device_id, "shell", "uiautomator", "dump", "/sdcard/window.xml"],
                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    subprocess.run(["adb", "-s", device_id, "pull", "/sdcard/window.xml"],
                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    try:
        tree = ET.parse("window.xml")
        root = tree.getroot()
        for node in root.iter():
            if node.get("content-desc") == "Khác":
                bounds = node.get("bounds")
                if bounds:
                    coords = list(map(int, re.findall(r"\d+", bounds)))
                    x = (coords[0] + coords[2]) // 2
                    y = (coords[1] + coords[3]) // 2
                    subprocess.run(["adb", "-s", device_id, "shell", "input", "tap", str(x), str(y)])
                    print(f"✅ Click 'Khác' tại ({x},{y})")
                    return True
        print("❌ Không tìm thấy nút 'Khác'")
        return False
    except Exception as e:
        print(f"❌ Lỗi XML: {str(e)}")
        return False

def paste_and_search(device_id, username):
    time.sleep(1)
    os.system(f'adb -s {device_id} shell input text "{username}"')
    print(f"✅ Nhập '{username}'")
    time.sleep(1)
    os.system(f'adb -s {device_id} shell input keyevent 66')
    print("✅ Ấn Enter tìm kiếm")

def click_follow_button(device_id):
    subprocess.run(["adb", "-s", device_id, "shell", "uiautomator", "dump", "/sdcard/window.xml"],
                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    subprocess.run(["adb", "-s", device_id, "pull", "/sdcard/window.xml"],
                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    try:
        with open("window.xml", "r", encoding="utf-8") as f:
            content = f.read()
        match = re.search(r'text="Follow".*?bounds="\[(\d+),(\d+)]\[(\d+),(\d+)]"', content)
        if match:
            x1, y1, x2, y2 = map(int, match.groups())
            x = (x1 + x2) // 2
            y = (y1 + y2) // 2
            subprocess.run(["adb", "-s", device_id, "shell", "input", "tap", str(x), str(y)])
            print(f"✅ Click 'Follow' tại ({x},{y})")
            return True
        else:
            print("❌ Không tìm thấy nút Follow")
            return False
    except Exception as e:
        print(f"❌ Lỗi XML Follow: {str(e)}")
        return False

def run_follow_adb(username):
    device = get_device_address()
    if device:
        if open_tiktok_studio(device):
            time.sleep(5)
            if find_and_click_khac(device):
                time.sleep(2)
                paste_and_search(device, username)
                time.sleep(3)
                click_follow_button(device)

# ======================= TDS =========================

def login_tds(token):
    try:
        r = requests.get(f'https://traodoisub.com/api/?fields=profile&access_token={token}', headers=headers).json()
        if 'success' in r:
            print(Colors.green + f"Đăng nhập thành công √ | User: {Colors.red + r['data']['user']} | Xu: {Colors.red + r['data']['xu']}")
            return 'success'
        print(Colors.red + "Token TDS sai!")
        return 'error_token'
    except: return 'error'

def load_job(type_job, token):
    try:
        r = requests.get(f'https://traodoisub.com/api/?fields={type_job}&access_token={token}', headers=headers).json()
        if 'data' in r: return r
        if "countdown" in r:
            sleep(round(r['countdown']))
            return 'error_countdown'
        return 'error_error'
    except: return 'error'

def duyet_job(type_job, token, uid):
    try:
        r = requests.get(f'https://traodoisub.com/api/coin/?type={type_job}&id={uid}&access_token={token}', headers=headers).json()
        if "cache" in r:
            return r['cache']
        elif "success" in r:
            print(f"{Colors.cyan}✔ {r['data']['job_success']} | {Colors.green}{r['data']['msg']} | {Colors.yellow}{r['data']['xu']}")
            return 'error'
        else:
            print(f"{Colors.red}{r['error']}")
            return 'error'
    except: return 'error'

# ======================= RUN =========================

os.system('clear')
banner = f"""
████████╗██╗  ██╗ ████████╗ █████╗  █████╗ ██╗      
╚══██╔══╝██║  ██║ ╚══██╔══╝██╔══██╗██╔══██╗██║      
   ██║   ███████║    ██║   ██║  ██║██║  ██║██║      
   ██║   ██╔══██║    ██║   ██║  ██║██║  ██║██║      
   ██║   ██║  ██║    ██║   ╚█████╔╝╚█████╔╝███████╗ 
   ╚═╝   ╚═╝  ╚═╝    ╚═╝    ╚════╝  ╚════╝ ╚══════╝ 
 Admin: Thiệu Hoàng | YT: @thieuhoang75 | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
print(Colorate.Horizontal(Colors.red_to_green, Center.XCenter(banner)))

try:
    token_tds = open("TDS.txt", "r").read().strip()
except:
    token_tds = Write.Input("Nhập token TDS:", Colors.red_to_green)
    with open("TDS.txt", "w") as f: f.write(token_tds)

if login_tds(token_tds) == 'success':
    delay = int(Write.Input("Delay mỗi job (giây):", Colors.red_to_green))
    max_job = int(Write.Input("Số lượng job muốn chạy:", Colors.red_to_green))
    done = 0
    while done < max_job:
        jobs = load_job("tiktok_follow", token_tds)
        if isinstance(jobs, dict):
            for job in jobs['data']:
                uid = job['id']
                link = job['link']
                run_follow_adb(uid)
                result = duyet_job("TIKTOK_FOLLOW", token_tds, uid)
                if result != 'error':
                    done += 1
                    now = datetime.now().strftime("%H:%M:%S")
                    print(f"{Colors.yellow}[{done}] {Colors.red}| {Colors.cyan}{now} {Colors.red}| {Colors.white}{uid}")
                if done >= max_job:
                    break
                for i in range(delay, 0, -1):
                    print(f"{Colors.red}⏳ Đợi {i}s...", end="\r")
                    sleep(1)
        else:
            print("Không lấy được nhiệm vụ, thử lại sau...")
